// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: worldname.sql

package sqlc

import (
	"context"
)

const selectGuildWorld = `-- name: SelectGuildWorld :one
SELECT id, guild_id, world_name
FROM guilds_world
WHERE guild_id = $1
LIMIT 1
`

type SelectGuildWorldRow struct {
	ID        int64
	GuildID   string
	WorldName string
}

func (q *Queries) SelectGuildWorld(ctx context.Context, guildID string) (SelectGuildWorldRow, error) {
	row := q.db.QueryRow(ctx, selectGuildWorld, guildID)
	var i SelectGuildWorldRow
	err := row.Scan(&i.ID, &i.GuildID, &i.WorldName)
	return i, err
}

const upsertGuildWorld = `-- name: UpsertGuildWorld :exec
INSERT INTO guilds_world (guild_id, world_name, created_at, updated_at)
VALUES ($1, $2, now(), now())
ON CONFLICT (guild_id)
DO UPDATE SET world_name = EXCLUDED.world_name, updated_at = now()
`

type UpsertGuildWorldParams struct {
	GuildID   string
	WorldName string
}

func (q *Queries) UpsertGuildWorld(ctx context.Context, arg UpsertGuildWorldParams) error {
	_, err := q.db.Exec(ctx, upsertGuildWorld, arg.GuildID, arg.WorldName)
	return err
}
