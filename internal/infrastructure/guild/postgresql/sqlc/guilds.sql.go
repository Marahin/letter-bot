// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: guilds.sql

package sqlc

import (
	"context"
)

const createGuild = `-- name: CreateGuild :one
INSERT INTO guilds (
                    guild_id,
                    guild_name
  )
VALUES ($1, $2)
RETURNING id, guild_id, guild_name
`

type CreateGuildParams struct {
	GuildID   string
	GuildName string
}

func (q *Queries) CreateGuild(ctx context.Context, arg CreateGuildParams) (Guild, error) {
	row := q.db.QueryRow(ctx, createGuild, arg.GuildID, arg.GuildName)
	var i Guild
	err := row.Scan(&i.ID, &i.GuildID, &i.GuildName)
	return i, err
}

const selectGuilds = `-- name: SelectGuilds :many
select guilds.id, guilds.guild_id, guilds.guild_name
from guilds
`

type SelectGuildsRow struct {
	Guild Guild
}

func (q *Queries) SelectGuilds(ctx context.Context) ([]SelectGuildsRow, error) {
	rows, err := q.db.Query(ctx, selectGuilds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectGuildsRow
	for rows.Next() {
		var i SelectGuildsRow
		if err := rows.Scan(&i.Guild.ID, &i.Guild.GuildID, &i.Guild.GuildName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
